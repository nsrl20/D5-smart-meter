/*
SMART METER SOFTWARE CONTROL
Author: Noor Syazwani Atiqah Binti Ros Lee 
*/ 


//avr-gcc -mmcu=atmega644p -L../lcdlib -o prog.elf prog.c -llcd
//avr-objcopy -O ihex prog.elf prog.hex
//avrdude -c usbasp -p m644p -U flash:w:prog.hex


#include "lcd.h"
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdbool.h>

#define F_CPU 12000000UL
#define VREF 3.3
#define ADCMAX 1023

//SETTING UP THE PINS FOR INPUTS AND OUTPUTS 

/* Analogue input pins*/
/* PORTA use for the ADC Function*/
#define I_WIND PA0
#define I_PV PA1 
#define V_BUSBAR PA2
#define I_BUSBAR PA3 

/*Digital Input Pins*/
#define CALL_LOAD1 PA4
#define CALL_LOAD2 PA5
#define CALL_LOAD3 PA6

/*Digital Output Pins */
#define CHARGE_BATTERY PD2
#define DISCHARGE_BATTERY PD3
#define SWITCH_LOAD1 PD4
#define SWITCH_LOAD2 PD5
#define SWITCH_LOAD3 PD6 

/*Mains Request output call*/
#define MAIN_CALL PD7 

/*Double for mains required*/
double mains_req = 0;

/*Doubles for input values*/
double mains_capacity = 0;
double busbar_volt = 0;
double busbar_curr = 0;
double wind_cap = 0;
double pv_cap = 0;

/*Boolean array for loads and switches*/
//bool Load_Call[3]={ true, true, false};
//bool Load_Sw[3]= {true ,false, false};
bool Load_Call1 =0;
bool Load_Call2 = 0;
bool Load_Call3 =0;

bool Load_Sw1 =0;
bool Load_Sw2 =0;
bool Load_Sw3 =0;

/*Boolean array for charging and discharging battery*/
bool charging_battery = 0;
bool discharging_battery = 0;

/*Boolean array for power consumption*/
double power_consumption = 0;

/* Counter can last up until 106751991 days before it overflows */
volatile uint64_t counter ; 
/* Battery counter */
volatile uint32_t battery_counter = 0 ;

/* Battery level */
int battery_level = 0 ;

/* ==================================
    Function base initialisation 
	==================================*/

/* Interupt service routine */
ISR(TIMER1_COMPA_vect) ;

/*Initialisation*/
void init_ADC();
void init_digital();
void init_timer();
void init_pwm();
rectangle create_bar(int y, double value);

/*Measure Inputs*/
double input_adcread(uint8_t channel);
double calculateRMS(uint8_t channel);
void LoadDigital();

/*Calculate Output*/
void OutputPWM();
void OutputDigital ();

/*Read and send inputs and output*/
void ReadInputs();
void SendOutput();

/*Logics*/
double checkLoadDemand(bool call , double current);
void ControlFlow (bool load1_call, bool load2_call, bool load3_call);

/*Display graphics*/
//int display_BoolCheck(bool load);
//void display_Line();
void display_Double (int xpos,int ypos, char*name, double value, char*units, int width, int decimal_places);
//void display_Loads(int xpos, int ypos, char*name, bool load_call, bool load_switch);
//void display_Battery( int xpos, int ypos, char*name , bool charging, bool discharging);
//void display_Value();
//void display_PixelShift(rectangle*shape, int width);
//void display_TeamName();

/*Updates screen and information
void update_Line(rectangle*bar, double value, int ypos);
void update_BatteryLevel();*/

/*Delays*/
//void delay_500ms();


/*=======================================
           Functions Definitions 
  ======================================*/
ISR(TIMER1_COMPA_vect)
{
/*counter incremented by every 1 milisecond*/
	counter++;
	
	/*Counter for battery level*/
	if ((charging_battery)&&(battery_counter <720000))
		battery_counter++;
	if ((discharging_battery)&& (battery_counter>0))
		battery_counter--;
}
void init_timer()
{
	TCCR1A |= 0; 		   //timer for cycle control
	TCCR1B |= _BV(WGM13);  //cycle to cycle (CTC Mode) 
	TCCR1B |= _BV(CS11);   // Prescaler set to 8 
	OCR1A  |= 1499; 	   // TOP-1, 12MHz/8= 1500000 X 10^-3= 1500
	TIMSK1 |= _BV(OCIE1A); // Output Compare A Match Interrupt Enable
}

void init_ADC()
{ 
	/*ADEN = 1;  //Enable the ADC 
	  ADPS1 = 1; 
	  ADPS2 = 1; 
	  ADPS0 = 0; // 1,1,0 ADC Prescaler Selections : Division factor 64*/
	  
	  ADCSRA |= _BV(ADEN) | _BV(ADPS2) | _BV(ADPS1); /* F_ADC= F_CPU/64 = 187.5kHz */
}
	 
void init_digital()
{
	/*set digital inputs at PORTA*/
	/*Load call input*/
	DDRA &= ~(_BV(CALL_LOAD1)|_BV(CALL_LOAD2)|_BV(CALL_LOAD3));
	PORTA &= ~(_BV(CALL_LOAD1)|_BV(CALL_LOAD2)|_BV(CALL_LOAD3));
	
	/*setting digital output at PORTD*/
	/*Load switch, charge and discharge*/
	
	DDRD |=_BV(SWITCH_LOAD1)|_BV(SWITCH_LOAD2)|_BV(SWITCH_LOAD3)|_BV(CHARGE_BATTERY)|_BV(DISCHARGE_BATTERY);
	PORTD &= ~(_BV(SWITCH_LOAD1)|_BV(SWITCH_LOAD2)|_BV(SWITCH_LOAD3)|_BV(CHARGE_BATTERY)|_BV(DISCHARGE_BATTERY));
}

void init_pwm()
{
	/*set Pin  D7 as output */
	DDRD |= _BV(MAIN_CALL);
	
	/*Set up Timer/Counter2 Output Compare Match A Output on the Fast PWM*/ 
	/*Pin OC2A is set to be non-inverted*/
	TCCR2A |= _BV(COM2A1)|_BV(WGM20)|_BV(WGM21);
	
	/*set to no prescaler */
	TCCR2B |= _BV(CS20);
}

double input_adcread(uint8_t channel)
{
	double ADCread = 0;
	ADMUX = channel; 		/*select channel as ADC input*/
	ADCSRA |= _BV(ADSC);	 /* Start Conversions */
	
	while (ADCSRA & _BV(ADSC));
	ADCread = ((ADC * VREF)/ADCMAX ); /*single ended conversion result ADC = Vin * 1024 / Vref, in this case ADCread = Vin*/
	
	return (double) ADCread; /*return result as double*/
}

double calculateRMS(uint8_t channel)
{
	/* RMS formula = Vmax * 1/(âˆš2)*/
	/* for busbar voltage and busbar current, 50Hz AC from -4V to 4V*/ 
	/* in one period, 50Hz = 20ms , the half of the wave would be 25Hz, max peak would be approximate 30ms*/ 
	
	uint32_t periodend = counter + 30;
	double value = 0;
	double maxvalue = 0; 
	
	/*within period of 30ms, we need to find the max amplitude*/
	while (counter <=periodend)
	{
		value = input_adcread(channel);
		if (value > maxvalue)
			maxvalue = value;
	}
	
	maxvalue = (maxvalue/sqrt(2)); //finding rms from the max amplitude*/
	return maxvalue;
}

void LoadDigital () 
{
	/*Get Load 1 call*/ 
	int input = PINA & _BV(CALL_LOAD1);
	/* Set to Boolean*/ 
	if (input) 
		Load_Call1 = 1;
	else 
		Load_Call1 = 0;
	
	/*Get Load 2 call*/ 
	input = PINA & _BV(CALL_LOAD2);
	/* Set to Boolean*/ 
	if (input) 
		Load_Call2 = 0;
	else 
		Load_Call2 = 0;
	
	/*Get Load 3 call*/ 
	input = PINA & _BV(CALL_LOAD3);
	/* Set to Boolean*/ 
	if (input) 
		Load_Call3 = 0;
	else 
		Load_Call3 = 0;
	
}

void OutputPWM()
{
	/* set the duty cycle of the PWM */
	OCR2A = (mains_req/2) * 255 ; //from handbook
}

void OutputDigital()
{
	/*Set the Load Switch 1 high */ 
	if (Load_Sw1==1)
		PORTD |= _BV(SWITCH_LOAD1);
	else 
		PORTD &= ~(_BV(SWITCH_LOAD1));
	
	/*Set the Load Switch 2 high */ 
	if (Load_Sw2==1)
		PORTD |= _BV(SWITCH_LOAD2);
	else 
		PORTD &= ~(_BV(SWITCH_LOAD2));
	
	/*Set the Load Switch 3 high */ 
	if (Load_Sw3==1)
		PORTD |= _BV(SWITCH_LOAD3);
	else 
		PORTD &= ~(_BV(SWITCH_LOAD3));
	
	/*Set the switch for charging battery*/
	if (charging_battery)
		PORTD |= _BV(CHARGE_BATTERY);
	else 
		PORTD &= ~(_BV(CHARGE_BATTERY));
	
	/*Set the switch for Discharging battery*/
	if (discharging_battery)
		PORTD |= _BV(DISCHARGE_BATTERY);
	else 
		PORTD &= ~(_BV(DISCHARGE_BATTERY));
}

void ReadInputs()
{
	/*Read analogue signal values*/
	//busbar_volt = calculateRMS(0);
	//busbar_curr = calculateRMS(1);
	wind_cap = input_adcread(2);
	pv_cap = input_adcread(3);
	
	/*Get the load calls*/
	LoadDigital();
}

void SendOutput()
{
	/*send the outputs*/
	OutputPWM();
	OutputDigital();
}

double checkLoadDemand(bool call, double current)
{
/*return value of the current required by the load*/
	if (call==1) 
		return current;
	else 
		return 0; 
}
/*===============
	ALGORITHM
  ===============*/
  
void ControlFlow (bool load1_call, bool load2_call, bool load3_call)
{
	//Initialize variables 
	//int i = 0; 
	mains_req = 0;
	charging_battery =0;
	discharging_battery =0;
	bool checkLoad1 = 1;
	bool checkLoad2 = 1;
	bool checkLoad3 = 1;
	
	//Maximum Mains Current//
	double max_MainsCurrent = 2.0; 
	
	//Calculate total load requirements*/
	double load1_demand = checkLoadDemand(load1_call, 1.2);
	double load2_demand = checkLoadDemand(load2_call, 2.0);
	double load3_demand = checkLoadDemand(load3_call, 0.8);
	
	//Calculate the total renewable energy and load//
	double totalRenewable  = wind_cap + pv_cap;
	double totalLoadEnergy = load1_demand + load2_demand + load3_demand;

	//Check if the energy is enough//
	if (totalRenewable >= totalLoadEnergy)
{	//Calculate excess current// 
	double excesscurrent = totalRenewable - totalLoadEnergy;
	
	//check if excess, should we discharge or charge battery//
	if (excesscurrent >= 1) //if more than 1A, charge the battery//
	{
		charging_battery = 1;
		discharging_battery = 0;
		checkLoad1 = 1;
		checkLoad2 = 1;
		checkLoad3 = 1;
	}

	 //Excess current insufficient for battery - draw mains
	else if (excesscurrent > 1 && excesscurrent < 0)
	{
		// Request extra current from main to charge the battery//
		mains_req = ((1.0-excesscurrent)*(10/max_MainsCurrent));
		charging_battery = 1;
		discharging_battery = 0; 
		checkLoad1 = 1;
		checkLoad2 = 1;
		checkLoad3 = 1;
	}
	else 
	{
	// maintain the battery at idle state, total renewable energy is the same as total load current//
		charging_battery = 0;
		discharging_battery = 0;
		checkLoad1 = 1;
		checkLoad2 = 1;
		checkLoad3 = 1;
	}
}
	else 
	{//If renewable energy is less than load demands// 
		double CurrentRequirement = totalLoadEnergy - totalRenewable;
		if ((CurrentRequirement > 0)&& (CurrentRequirement <=3))
		{
			//Calculate required mains//
		mains_req = CurrentRequirement *(10/max_MainsCurrent);
		charging_battery = 0;
		discharging_battery = 0;
		checkLoad1 = 1;
		checkLoad2 = 1;
		checkLoad3 = 1;
		
		}
		else if ((CurrentRequirement  > 3) && (CurrentRequirement <= 4))
		{
			//Calculate mains required after discharging battery//
		double  NewCurrentRequired = CurrentRequirement - 1;
			//Calculate new mains current//
		mains_req = NewCurrentRequired * (10/max_MainsCurrent);
		charging_battery = 0;
		discharging_battery = 1;
		checkLoad1 = 1;
		checkLoad2 = 1;
		checkLoad3 = 1;
		}
	}
	/* ===============================
	      Set the load switches 
	   ===============================*/
	   
	 // Load Switch 1//
	if((checkLoad1==1)&&(Load_Call1==1))
		Load_Sw1= 1;
	else 
		Load_Sw1 = 0;
	
	//Load Switch 2//
	if((checkLoad2==1)&&(Load_Call2==1))
		Load_Sw2 =1;
	else 
		Load_Sw2 =0;
	
	//Load Switch 3//
	if((checkLoad3==1)&&(Load_Call3==1))
		Load_Sw3 = 1;
	else 
		Load_Sw3 =0; 
		
	  
	  power_consumption = (busbar_volt* (400/VREF)*totalLoadEnergy)/1000;
	 }
	
/* =======================
	DISPLAY FUNCTIONS
   ======================*/


void display_Double (int xpos,int ypos,char*name,double value,char*units, int width, int decimal_places)
{
	/*set font colour as white */
	display.foreground = WHITE;

	/*Set position on the screen*/
	display.x = xpos;
	display.y = ypos;

	/*Temporary value for converting double to string*/
	char string[10];
	
	/*Converting double to string*/
	//sprintf (temp_value, "%4.2lf", value);// Print variable to 4 field width and 2 digits after decimal point// 
	dtostrf ( value , width , decimal_places, string );
	
	/*Print the converted double as string*/
	display_string(name);
	display_string(string);
	display_string(units);
}


/* ==================
	MAIN SEQUENCE
   ==================*/	
	   
int main ()
{
	/*TFT display bootup*/
	init_lcd();
	
	/*Setup display orientation*/
	orientation o = East;
	set_orientation (o);
	
	/*Restart the screen*/
	clear_screen ();
	
	/*Setup ADC*/ 
	init_ADC();
	
	/*Setup digital InOuts*/
	init_digital();
	
	/*Setup timer*/
	init_timer();
	
	/*Setup PWM*/
	init_pwm();
	
	/*Enable interrupts*/
	sei();
	
	
	/*Forever Loop*/
	for (;;)
	{
		
	/*Read all inputs signals*/
	ReadInputs();
	display_Double(100,120,"Value of ADC PV  = ", pv_cap, "v" , 3,2);
	display_Double(100,140,"Value of ADC Wind =",wind_cap,"V" , 3,2);
	}
	return 0;
	}

